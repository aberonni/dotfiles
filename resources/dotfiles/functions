#!/usr/bin/env bash

# The git prompt's git commands are read-only and should not interfere with
# other processes. This environment variable is equivalent to running with `git
# --no-optional-locks`, but falls back gracefully for older versions of git.
# See git(1) for and git-status(1) for a description of that flag.
#
# We wrap in a local function instead of exporting the variable directly in
# order to avoid interfering with manually-run git commands by the user.
function __git_prompt_git() {
  GIT_OPTIONAL_LOCKS=0 command git "$@"
}

# Outputs the name of the current branch
# Usage example: git pull origin $(git_current_branch)
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
function git_current_branch() {
  local ref
  ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}


brew_cask_upgrade() {
	red=`tput setaf 1`
	green=`tput setaf 2`
	reset=`tput sgr0`

	casks=( $(brew cask list) )
	for cask in ${casks[@]}
	do
		version=$(brew cask info $cask | sed -n "s/$cask:\ \(.*\)/\1/p")
		installed=$(find "/usr/local/Caskroom/$cask" -maxdepth 1 -name "$version" -type d)

		if [[ -z $installed ]]; then
			echo "${red}${cask}${reset} requires ${red}update${reset}."
			(set -x; brew cask install $cask --force;)
		else
			echo "${red}${cask}${reset} is ${green}up-to-date${reset}."
		fi
	done
}

pr (){
	open-pr ${1-main}
}

_pr () {
	branches=($(git branch -r --list \*VR-\*))
	arguments=()
	for branch in "${branches[@]}"; do
		arguments+=(${branch##*/})
	done
	arguments+=("main")
	unset branches
	_values '' $arguments && ret=0
	unset arguments
}

gzip_size () {
	gzip -c $1 | wc -c
}

show-port() { lsof -i :$1; }
free-port() { kill "$(lsof -t -i :$1)"; }
kill-port() { kill -kill "$(lsof -t -i :$1)"; }

clean-branches() {
	git remote prune origin
	git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -D
}

restart-121-service() (
	cd ~/git/121-platform/services
	docker-compose -f docker-compose.yml -f docker-compose.development.yml down
	npm run start:services
	timeout 180s sh -c 'until docker ps | grep 121-service | grep -q \(healthy\); do echo "Waiting for 121-service to be healthy..."; sleep 1; done'
	curl -d '{"secret":"fill_in_secret"}' -H "Content-Type: application/json" -X POST 'http://localhost:3000/api/scripts/reset?script=nlrc-multiple-mock-data'
	docker logs -f 121-service
)

fix-i18n-conflict () {
	cd ~/git/121-platform/interfaces/Portalicious
	git checkout $(git rev-parse HEAD) src/locale
	npm run extract-i18n
	git add src/locale
}
